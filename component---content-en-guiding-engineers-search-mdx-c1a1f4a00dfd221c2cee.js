(self.webpackChunkkernel_community=self.webpackChunkkernel_community||[]).push([[803],{87878:function(e,t,n){"use strict";n.r(t),n.d(t,{_frontmatter:function(){return l},default:function(){return p}});var a,r=n(19756),o=(n(67294),n(63497)),i=n(60975),s=["components"],l={},d=(a="CTA",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),h={_frontmatter:l},u=i.Z;function p(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)(u,Object.assign({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"the-intricacies-of-search",style:{position:"relative"}},"The Intricacies of Search",(0,o.kt)("a",{parentName:"h1",href:"#the-intricacies-of-search","aria-label":"the intricacies of search permalink",className:"anchor-link after"},(0,o.kt)("span",{parentName:"a"},"¶"))),(0,o.kt)("p",null,"We began implementing search using Algolia, but then pivoted to Lunr. The pros were obvious:\nno server side apis, no external requests, search indexing as a part of the build process.\nIt was everything we got out of the old Algolia integration but without the need to manage yet\nanother service. The integration works well, yet it took some time to understand how the indexing\nis handled."),(0,o.kt)("h2",{id:"why-lunr",style:{position:"relative"}},"Why Lunr",(0,o.kt)("a",{parentName:"h2",href:"#why-lunr","aria-label":"why lunr permalink",className:"anchor-link after"},(0,o.kt)("span",{parentName:"a"},"¶"))),(0,o.kt)("p",null,"Algolia is great, but it has limits since it's a SAAS (software as service). The indexing and tools\nthey provide are fantastic, and if this were a project that had a larger dependency on search we'd\nconsider it. However, that's not the case. We don't need an extremely robust elastic search engine\nto index our content pages. We just need a search that meets the minimal requirements of being search."),(0,o.kt)("p",null,"Lunr is also used widely. If you've used mkdocs or docusaurus recently then you've used Lunr."),(0,o.kt)("h2",{id:"how-lunr-indexes",style:{position:"relative"}},"How Lunr Indexes",(0,o.kt)("a",{parentName:"h2",href:"#how-lunr-indexes","aria-label":"how lunr indexes permalink",className:"anchor-link after"},(0,o.kt)("span",{parentName:"a"},"¶"))),(0,o.kt)("p",null,"Since we're using Gatsby, there's always an integration someone has built, and luckily we have\nthe gatsby-plugin-lunr that does a lot of heavy lifting for us. We provide languages and how to filter nodes\nin the options oof our plugin in the ",(0,o.kt)("inlineCode",{parentName:"p"},"gatsby-config")," like so:"),(0,o.kt)("div",{className:"gatsby-code-title prism-code-title"},"gatsby-config.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'options: {\n  languages: [\n    {\n      name: "en",\n      filterNodes: (node) =>\n        node.frontmatter !== undefined &&\n        node.fileAbsolutePath &&\n        node.fileAbsolutePath.match(\n          /\\/en\\/(?!header.mdx|index.mdx|404.mdx|.js|.json)/\n        ) !== null,\n    },\n  ];\n}\n')),(0,o.kt)(d,{mdxType:"CTA"},(0,o.kt)("p",null,"Here, we filter out nodes that don't have frontmatter, don't have an absolute path, and the\npath doesn't match any file at the top section of our locale like header.mdx, index.mdx, 404.mdx, etc.)")),(0,o.kt)("p",null,"For every new locale we add, we just make sure to update it's name, and the regex match ",(0,o.kt)("inlineCode",{parentName:"p"},"/\\/[LOCALE]\\/(?!header.mdx|index.mdx|404.mdx|.js|.json)/"),"."),(0,o.kt)("p",null,"We also provide it with which fields to index, if they should store it, and how it should be weighted:"),(0,o.kt)("div",{className:"gatsby-code-title prism-code-title"},"gatsby-config.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'fields: [\n          { name: "title", store: true, attributes: { boost: 20 } },\n          { name: "keywords", attributes: { boost: 15 } },\n          { name: "url", store: true },\n          { name: "excerpt", store: true, attributes: { boost: 5 } },\n        ],\n')),(0,o.kt)("p",null,"Then comes the hard part. How the fields get populated.\nWe provide Lunr with resolvers that match the key we would provide when querying through GraphQL.\nHowever, Lunr prefaces its resolvers with ",(0,o.kt)("inlineCode",{parentName:"p"},"all"),", so ",(0,o.kt)("inlineCode",{parentName:"p"},"Mdx")," refers too ",(0,o.kt)("inlineCode",{parentName:"p"},"allMdx")," in GraphQL:"),(0,o.kt)("div",{className:"gatsby-code-title prism-code-title"},"gatsby-config.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"resolvers: {\n          Mdx: {\n              title: TitleConverter,\n              url: UrlConverter,\n                ...\n")),(0,o.kt)("p",null,"Since we also have some rules around what a Title is and how the URL is provided from the data we have\n(remember, automagic) we added some util methods that take in a node and transforms its data to meet our needs (TitleConverter, UrlConverter, etc)."),(0,o.kt)("p",null,"Providing an excerpt on search requires more work, since the excerpt is supposed to be our compiled MDX in HTML form. However, that doesn't happen during build time, so ",(0,o.kt)("inlineCode",{parentName:"p"},"excerpt")," is undefined due to a timing issue with Lunr. The solution is to"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Use the description from the frontmatter if provided, or"),(0,o.kt)("li",{parentName:"ol"},"use the ",(0,o.kt)("inlineCode",{parentName:"li"},"rawBody")," and parse it manually like so:")),(0,o.kt)("div",{className:"gatsby-code-title prism-code-title"},"gatsby-config.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'excerpt: (node) => {.\n              if (node.frontmatter.description) {\n                return node.frontmatter.description;\n              }\n              const excerptLength = 136; // Hard coded excerpt length\n              let excerpt = "";\n              const tree = remark()\n                .use(remarkFrontmatter)\n                .use(removeFrontmatter)\n                .parse(node.rawBody);\n              visit(tree, "text", (node) => {\n                excerpt += node.value;\n              });\n              return `${excerpt.slice(0, excerptLength)}${\n                excerpt.length > excerptLength ? "..." : ""\n              }`;\n            },\n')))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---content-en-guiding-engineers-search-mdx-c1a1f4a00dfd221c2cee.js.map