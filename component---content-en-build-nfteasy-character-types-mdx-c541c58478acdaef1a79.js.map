{"version":3,"sources":["webpack://kernel-community/./content/en/build/nfteasy/character-types.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","InfoBlock","Box","Aligner","Button","Video","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","center","to","src","isMDXComponent"],"mappings":"yQAQaA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,cAASC,KAGZG,EAAYL,EAAc,aAC1BM,EAAMN,EAAc,OACpBO,EAAUP,EAAc,WACxBQ,EAASR,EAAc,UACvBS,EAAQT,EAAc,SACtBU,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGZ,GACF,YACD,OAAO,QAACS,EAAD,iBAAeD,EAAiBR,EAAhC,CAAuCY,WAAYA,EAAYC,QAAQ,eAG5E,cACE,GAAM,kBACN,MAAS,CACP,SAAY,aAHhB,mBAKsB,aAAGC,WAAW,KAChC,KAAQ,mBACR,aAAc,4BACd,UAAa,sBACZ,gBAAMA,WAAW,KAAjB,QACL,qIAAuH,sBAAYA,WAAW,KAAvB,gBAAvH,2PACA,gFAAkE,aAAGA,WAAW,IAC5E,KAAQ,mCADsD,cAAlE,QAE+B,aAAGA,WAAW,IACzC,KAAQ,oCADmB,cAF/B,qaAKA,cACE,GAAM,cACN,MAAS,CACP,SAAY,aAHhB,eAKkB,aAAGA,WAAW,KAC5B,KAAQ,eACR,aAAc,wBACd,UAAa,sBACZ,gBAAMA,WAAW,KAAjB,QACL,mBACE,cAAIA,WAAW,MAAf,oFAEF,QAACX,EAAD,CAAWU,QAAQ,cACjB,QAACT,EAAD,CAAKS,QAAQ,QACX,kBAAG,kBAAQC,WAAW,KAAnB,oBACH,kBAAG,eAAKA,WAAW,IACf,IAAO,6BACP,IAAO,gBAEX,wGACA,QAACT,EAAD,CAASU,QAAM,EAACF,QAAQ,YACtB,QAACP,EAAD,CAAQU,GAAG,4DAA4DH,QAAQ,UAA/E,gBAIN,cACE,GAAM,YACN,MAAS,CACP,SAAY,aAHhB,aAKgB,aAAGC,WAAW,KAC1B,KAAQ,aACR,aAAc,sBACd,UAAa,sBACZ,gBAAMA,WAAW,KAAjB,QACL,QAACP,EAAD,CAAOU,IAAI,qDAAqDJ,QAAQ,WAK5EF,EAAWO,gBAAiB","file":"component---content-en-build-nfteasy-character-types-mdx-c541c58478acdaef1a79.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/kernel-v2/kernel-v2/src/modules/layouts/default_layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InfoBlock = makeShortcode(\"InfoBlock\");\nconst Box = makeShortcode(\"Box\");\nconst Aligner = makeShortcode(\"Aligner\");\nconst Button = makeShortcode(\"Button\");\nconst Video = makeShortcode(\"Video\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"character-types\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Character Types`}<a parentName=\"h1\" {...{\n        \"href\": \"#character-types\",\n        \"aria-label\": \"character types permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`¶`}</span></a></h1>\n    <p>{`We've looked into the nature of Git, Node and Hardhat and have been courageous enough to dive into the infamous `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{` directory to understand more about the Open Zeppelin libraries and all they enable us to do in a safe and peer-reviewed manner. We've even written our first smart contract. Now it's time to speak of compilers, networks, types, tests, and tasks. `}</p>\n    <p>{`Good engineering is about the conscious, clear and precise `}<a parentName=\"p\" {...{\n        \"href\": \"/learn/module-0/play-of-pattern\"\n      }}>{`management`}</a>{` of `}<a parentName=\"p\" {...{\n        \"href\": \"/learn/module-4/consensus/#brief\"\n      }}>{`trade-offs`}</a>{`. More than any specific skill, we wish to illustrate in this session how we think about different trade-offs. This session is not going to be about taking the easy route for “educational” purposes. We’re going to look deeply into the alternatives we pick and why, so that we can come to the end of this guild with a production-ready repo that you can actually understand and use yourself for your own creative work.`}</p>\n    <h2 {...{\n      \"id\": \"preparation\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Preparation`}<a parentName=\"h2\" {...{\n        \"href\": \"#preparation\",\n        \"aria-label\": \"preparation permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`¶`}</span></a></h2>\n    <ol>\n      <li parentName=\"ol\">{`Breathe deeply for 20 minutes. This is a session meant to test your character.`}</li>\n    </ol>\n    <InfoBlock mdxType=\"InfoBlock\">\n      <Box mdxType=\"Box\">\n        <p><strong parentName=\"p\">{`Type the Truth`}</strong></p>\n        <p><img parentName=\"p\" {...{\n            \"src\": \"/images/build/truetype.png\",\n            \"alt\": \"True Type\"\n          }}></img></p>\n        <p>{`Each session in this build guild can be found on its own branch in the repo below:`}</p>\n        <Aligner center mdxType=\"Aligner\">\n          <Button to=\"https://github.com/kernel-community/nfteasy/tree/lesson-1\" mdxType=\"Button\">Continue</Button>\n        </Aligner>\n      </Box>\n    </InfoBlock>\n    <h2 {...{\n      \"id\": \"recording\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Recording`}<a parentName=\"h2\" {...{\n        \"href\": \"#recording\",\n        \"aria-label\": \"recording permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`¶`}</span></a></h2>\n    <Video src=\"https://www.youtube-nocookie.com/embed/7zHxndNEBaw\" mdxType=\"Video\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}