{"version":3,"sources":["webpack://kernel-community/./content/en/guiding/engineers/translation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---content-en-guiding-engineers-translation-mdx-3b1113604cd9ee2e093c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/kernel-v2/kernel-v2/src/modules/layouts/default_layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"translations-and-the-ui\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Translations and the UI`}<a parentName=\"h1\" {...{\n        \"href\": \"#translations-and-the-ui\",\n        \"aria-label\": \"translations and the ui permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`¶`}</span></a></h1>\n    <p>{`Translations can present a challenge. Our philosophy is that\n\"content creators write the website\", so the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` folder therefore decides how the site is rendered,\nincluding translated content. However, this is an issue when translating inline UI elements that we won't\nprovide in MDX (like the Search bar). This means there's a break in how we can translate copy like \"Search\"\nand \"No results\" into the current locale...`}</p>\n    <h2 {...{\n      \"id\": \"why-not-i18n-or-another-library\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Why Not i18n or another library?`}<a parentName=\"h2\" {...{\n        \"href\": \"#why-not-i18n-or-another-library\",\n        \"aria-label\": \"why not i18n or another library permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`¶`}</span></a></h2>\n    <p>{`i18n is a Javascript API that allows developers an easy and \"lightweight\" way of translating\ntextual content for a node based application. It's been great, but the reason we decided NOT to use it for this\nproject is because it would couple translated content with our code. This is a big no-no, as it goes against our WYSIWYG\nphilosophy for the content folder and means that content creators would have to translate text in 2 different places.`}</p>\n    <p>{`Add to this the fact that the i18n package for gatsby, and other frameworks, has a tendency to be larger than necessary.\nWe believe that keeping things simple will be a positive for the scale of our application. Therefore, we present:`}</p>\n    <h2 {...{\n      \"id\": \"usetranslation-aka-maximumlang\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`useTranslation aka MaximumLang`}<a parentName=\"h2\" {...{\n        \"href\": \"#usetranslation-aka-maximumlang\",\n        \"aria-label\": \"usetranslation aka maximumlang permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`¶`}</span></a></h2>\n    <p>{`useTranslation is a hook developed by Réjon Taylor-Foster with inspiration from and reference to\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://w11i.me/how-to-build-multilingual-website-in-next-js\"\n      }}>{`this blog`}</a>{`. It is capable of being initialized\ninside a functional components and exports the current site's locale, and a `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` function.`}</p>\n    <h3 {...{\n      \"id\": \"how-to-translate-in-code\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`How to translate in code`}<a parentName=\"h3\" {...{\n        \"href\": \"#how-to-translate-in-code\",\n        \"aria-label\": \"how to translate in code permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`¶`}</span></a></h3>\n    <p>{`If your `}<inlineCode parentName=\"p\">{`en/UI.json`}</inlineCode>{` looks like this:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Language\": \"English\",\n    \"Search\": \"Search\",\n    \"No_Results\": \"No results for '{{searchText}}'\",\n    \"Home\": \"Home\"\n  }\n}\n`}</code></pre>\n    <p>{`you can have it translated and render the word \"Search\" by writing the following:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`component-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from \"@modules/localization/useTranslation\";\n\nconst ComponentExample = () => {\n  const { locale, t } = useTranslation();\n\n  return <p>{t(\"Search\")}</p>;\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"langspaces\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`LangSpaces`}<a parentName=\"h3\" {...{\n        \"href\": \"#langspaces\",\n        \"aria-label\": \"langspaces permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`¶`}</span></a></h3>\n    <p>{`We can extend the capabilities of this simple `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` function with what we call LangSpaces (Language Spaces):`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Language\": \"English\",\n    \"Search\": \"Search\",\n    \"No_Results\": \"No results for '{{searchText}}'\",\n    \"Home\": \"Home\",\n    \"Errors\": {\n      \"error_a\": \"This is an error inside of a langspace called Errors\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`you can have it translate and render \"error_a\" by writing the following:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`component-langspace-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from \"@modules/localization/useTranslation\";\n\nconst ComponentExample = () => {\n  const { locale, t } = useTranslation();\n\n  return <p>{t(\"error_a\", \"Errors\")}</p>;\n};\n`}</code></pre>\n    <p>{`For the sake of quality of life it's possible to pass in a default lang space for your current translation as well:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`component-langspace-default-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from \"@modules/localization/useTranslation\";\n\nconst ComponentExample = () => {\n  const { locale, t } = useTranslation(\"Errors\"); //<- Notice\n\n  return (\n    <p>{t(\"error_a\")}</p> //<- Notice\n  );\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"variables-and-plurals\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Variables and Plurals`}<a parentName=\"h3\" {...{\n        \"href\": \"#variables-and-plurals\",\n        \"aria-label\": \"variables and plurals permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`¶`}</span></a></h3>\n    <p>{`You want the variable of counter included and with plurals? No problem, anything inside `}<inlineCode parentName=\"p\">{`{{}}`}</inlineCode>{` will be replaced when rendered:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Friend\": \"A Friend\",\n    \"Friend_plural\": \"{{count}} Friends\",\n    \"VariableExample\": \"My name is {{name}}\"\n  }\n}\n`}</code></pre>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`variable-component-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from '@modules/localization/useTranslation'\n\nconst ComponentExample = () => {\n   const {locale, t} = useTranslation();\n\n  return (\n       <p>{t(\"Friend\", null, {count: 0})}</p> //0 Friends\n       <p>{t(\"Friend\", null, {count: 1})}</p> //Friend\n       <p>{t(\"Friend\", null, {count: 2})}</p> //2 Friends, etc.\n       <p>{t(\"VariableExample\", null, {name: \"Réjon\"})}</p> // My name is Réjon\n   )\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"advanced-plurals\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Advanced Plurals`}<a parentName=\"h3\" {...{\n        \"href\": \"#advanced-plurals\",\n        \"aria-label\": \"advanced plurals permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`¶`}</span></a></h3>\n    <p>{`Because different locales can have multiple plurals, and different ways of counting (i.e. Arabic),\nwe have a system in place to handle counting differently if the strict variable is added to the `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` function like so:\n`}<inlineCode parentName=\"p\">{`t('Friend', null, {count: 1, strict: true})`}</inlineCode>{`.`}</p>\n    <p>{`Your json will look like:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Friend\": \"A Friend\",\n    \"Friend_plural\": \"{{count}} Friends\",\n    \"Friend_0\": \"No Friends\",\n    \"Friend_1\": \"A Friend\",\n    \"Friend_2\": \"Two Friends\",\n    \"Friend_3\": \"Few Friends\",\n    \"Friend_4\": \"Many Friends\",\n    \"Friend_5\": \"Other/Lots of Friends\"\n  }\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: `}<inlineCode parentName=\"p\">{`Friend`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Friend_plural`}</inlineCode>{` are still valid, but will be overriden when `}<inlineCode parentName=\"p\">{`strict`}</inlineCode>{` is provided to the variables argument.`}</p>\n    </blockquote>\n    <p>{`Your output will look something like this:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`advanced-variable-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from '@modules/localization/useTranslation'\n\nconst ComponentExample = () => {\n   const {locale, t} = useTranslation();\n\n  return (\n       <p>{t(\"Friend\", null, {count: 0, strict: true})}</p> //No Friends (key: Friend_0)\n       <p>{t(\"Friend\", null, {count: 1, strict: true})}</p> //A Friend (key: Friend_1)\n       <p>{t(\"Friend\", null, {count: 2, strict: true})}</p> //Two Friends (key: Friend_2)\n       <p>{t(\"Friend\", null, {count: 5, strict: true})}</p> //Other/Lots of Friends (key: Friend_5)\n   )\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: If your count goes past 4 or is less than 0, it will default to key_5`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"getting-a-localized-string-from-another-locale\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Getting a localized string from another locale`}<a parentName=\"h3\" {...{\n        \"href\": \"#getting-a-localized-string-from-another-locale\",\n        \"aria-label\": \"getting a localized string from another locale permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`¶`}</span></a></h3>\n    <p>{`Let's say you're currently on the English locale, but you need a string from the French locale,\nbut also want to keep your current locale. Say no more fam:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Language\": \"English\"\n  }\n}\n`}</code></pre>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`fr/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Language\": \"Français\"\n  }\n}\n`}</code></pre>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`multilang-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from '@modules/localization/useTranslation'\n\nconst ComponentExample = () => {\n   const {locale, t} = useTranslation(); //Current locale is \"en\"\n\n  return (\n       <p>{t(\"Language\")}</p> //English\n       <p>{t(\"Language\",null,null,'fr')}</p> //Français\n   )\n}\n`}</code></pre>\n    <p>{`These are just examples for the sake of documentation. For an in-depth on how the function works,\nsee the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kernel-community/kernel-v2/blob/main/src/modules/localization/useTranslation.js\"\n      }}>{`comments in code`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}